apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: myapp
  namespace: otus-example
  annotations:
    kubernetes.io/ingress.class: nginx
    #    cert-manager.io/cluster-issuer: letsencrypt-testing
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
#    nginx.ingress.kubernetes.io/proxy-body-size: 1024m
#    nginx.ingress.kubernetes.io/whitelist-source-range: 'XX.XX.XX.XX/32, YY.YY.YY.YY/32'
#    nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
#    nginx.ingress.kubernetes.io/auth-url: "https://$host/oauth2/auth"
#    nginx.ingress.kubernetes.io/auth-signin: "https://$host/oauth2/start?rd=$escaped_request_uri"
spec:
  #  tls:
  #    - hosts:
  #        - mysuper.com
  #      secretName: nginx-dashboard-tls
  rules:
    - host: artur.yumaev
      http:
        paths:
          - backend:
              service:
                name: myapp
                port:
                  number: 7777
            pathType: Prefix
            path: /
---
apiVersion: v1
kind: Service
metadata:
  name: myapp
  namespace: otus-example
spec:
  #clusterIP: None
  type: ClusterIP
  ports:
    - port: 7777
      targetPort: 5678
  selector:
    app: myapp
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: myapp
  namespace: otus-example
  labels:
    app: test
spec:
  selector:
    matchLabels:
      app: myapp
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: myapp
    spec:
      containers:
        - image: hashicorp/http-echo:0.2.3
          args: ["-text=abracadabra"]
          name: supercontainer
          ports:
            - containerPort: 5678
          imagePullPolicy: IfNotPresent
#          readinessProbe:
#            httpGet:
#              path: /
#              port: 5678
#            initialDelaySeconds: 5
#            periodSeconds: 20

